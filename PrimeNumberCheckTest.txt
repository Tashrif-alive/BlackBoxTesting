

// Testing Prime Number within 1 to 1000 both BVC AND ROBUST

public class PrimeNumberTest {
    
    @test
    
    public void TestMinimumMinusOneCase()
    {
        PrimeNumberCheck basecase = new PrimeNumberCheck();

        boolean result = basecase.Check(0);

        assertEquals(true, result );
    }
    private void assertEquals(boolean b, boolean result) {
    }

    //Testing minimum = 1  value

    @test

    public void TestMinimumCase()
    {
        PrimeNumberCheck basecase = new PrimeNumberCheck();
        
        boolean result = basecase.Check(1);
        
        assertEquals(true ,result ) ;
    }

    //Testing ( minimum + 1 ) = 2 value

    @test

    public void TestMimimumPlusOneCase()
    {
        PrimeNumberCheck basecase = new PrimeNumberCheck();
   
        boolean result = basecase.Check(2);
  
        assertEquals(false, result );
    }

    //Testing nominal = 500 value

    @test

    public void TestNominal()
    {
     
        PrimeNumberCheck basecase = new PrimeNumberCheck();
  
        boolean result = basecase.Check(500);
  
        assertEquals( true, result);
    }

    //Testing ( maximum - 1 ) = 999 value
   
    @test

    public void TestMaximumMinusOneCase()
    {
        PrimeNumberCheck basecase = new PrimeNumberCheck();
     
        boolean result = basecase.Check(999);

        assertEquals( true, result);
    }

    //Testing maximum = 1000  value
    
    @test

    public void TestMaximumCase()
    {
        PrimeNumberCheck basecase = new PrimeNumberCheck();
    
        boolean result = basecase.Check(1000);
    
        assertEquals( true, result );
    }

    //Testing  ( maximum + 1 ) = 1001 value
    
    @test

    public void TestMaximumPlusOneCase()
    {
        PrimeNumberCheck basecase = new PrimeNumberCheck();
        
        boolean result = basecase.Check(1001);
        
        assertEquals( true, result);
    }
}